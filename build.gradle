plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'org.example'
version '1.0.0'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    junitVersion = '5.10.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = "21"
    targetCompatibility = "21"
}

application {
    mainModule = 'org.example.deadknight'
    mainClass = 'org.example.deadknight.DeadKnightApp'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.graphics', 'javafx.swing'] // по необходимости
}

dependencies {
    implementation('com.github.almasb:fxgl:21.1') {
        exclude(group: 'org.openjfx')
    }

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9' // или logback-classic


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

shadowJar {
    archiveBaseName.set('deadknight')
    archiveVersion.set(project.version)
    archiveClassifier.set('')
    mergeServiceFiles()

    from('src/main/resources') {
        into('/')
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'DeadKnight'
    }

    jpackage {
        installerType = 'exe'
        mainClass = 'org.example.deadknight.DeadKnightApp'
        installerOptions = [
                '--win-menu', '--win-shortcut',
                '--icon', 'icon/deadknight.ico'
        ]
        resourceDir = file('src/main/resources/assets/textures')
    }
}

// порядок зависимостей
tasks.named('startShadowScripts') {
    dependsOn tasks.named('jar')
    dependsOn tasks.named('shadowJar')
}

tasks.named('distZip') { dependsOn shadowJar }
tasks.named('distTar') { dependsOn shadowJar }
tasks.named('startScripts') { dependsOn shadowJar }
tasks.named('jlink') { dependsOn shadowJar }
tasks.named('jpackage') { dependsOn shadowJar }
tasks.named('prepareMergedJarsDir') { dependsOn shadowJar }
